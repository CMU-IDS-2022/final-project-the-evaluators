{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","props","render","pageContent","page0","className","onClick","handleHome","handleCompareCourse","handleCompareDepartment","handleCompareInstructor","setState","currPage","Streamlit","setComponentValue","state","args","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gQAeMA,E,kDAEJ,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IAODC,OAAS,WAiBd,OACE,6BAAM,EAAKC,gBA1BQ,EA8BhBC,MAAQ,kBACb,yBAAKC,UAAU,kCACb,4BACIC,QAAS,EAAKC,WACdF,UAAU,iBAFd,QAME,4BACEC,QAAS,EAAKE,oBACdH,UAAU,iBAFZ,mBAMA,4BACEC,QAAS,EAAKG,wBACdJ,UAAU,iBAFZ,uBAMA,4BACEC,QAAS,EAAKI,wBACdL,UAAU,iBAFZ,yBAlDiB,EA6DfF,YAAc,WACpB,OAAO,EAAKC,SA9DS,EAmEfG,WAAa,WAGnB,EAAKI,SACH,CAAEC,SAAU,IAGdC,IAAUC,kBACR,CAAEF,SAAU,KA3EO,EA+EfJ,oBAAsB,WAG5B,EAAKG,SACH,CAAEC,SAAU,IAGdC,IAAUC,kBACR,CAAEF,SAAU,KAvFO,EA2FfH,wBAA0B,WAGhC,EAAKE,SACH,CAAEC,SAAU,IAGdC,IAAUC,kBACR,CAAEF,SAAU,KAnGO,EAuGfF,wBAA0B,WAIhC,EAAKC,SACH,CAAEC,SAAU,IAGdC,IAAUC,kBACR,CAAEF,SAAU,KA9Gd,EAAKG,MAAQ,CACXH,SAAU,EAAKX,MAAMe,KAAX,UAEZH,IAAUC,kBAAkB,CAAC,SAAY,IALpB,E,uBAFCG,KAsIXC,cAAwBlB,GCjJvCmB,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d648220a.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  currPage: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      currPage: this.props.args[\"currPage\"]\n    }\n    Streamlit.setComponentValue({\"currPage\": 0});\n  }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    \n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n  \n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div>{this.pageContent()}</div>\n    )\n  }\n\n  public page0 = () => (\n    <div className=\"d-flex justify-content-between\">\n      <button\n          onClick={this.handleHome}\n          className=\"btn btn-light\"\n        >\n          Home\n        </button>\n        <button\n          onClick={this.handleCompareCourse}\n          className=\"btn btn-light\"\n        >\n          Compare Courses\n        </button>\n        <button\n          onClick={this.handleCompareDepartment}\n          className=\"btn btn-light\"\n        >\n          Compare Departments\n        </button>\n        <button\n          onClick={this.handleCompareInstructor}\n          className=\"btn btn-light\"\n        >\n          Compare Instructors\n        </button>\n    \n    </div>\n  )\n\n\n  private pageContent = (): any => {\n    return this.page0();\n  }\n\n\n  /** Click handler for our \"Click Me!\" button. */\n  private handleHome = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      { currPage: 0 },\n    )\n\n    Streamlit.setComponentValue(\n      { currPage: 0 }\n    );\n  }\n\n  private handleCompareCourse = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      { currPage: 1 },\n    )\n\n    Streamlit.setComponentValue(\n      { currPage: 1}\n    );\n  }\n\n  private handleCompareDepartment = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      { currPage: 2 },\n    )\n\n    Streamlit.setComponentValue(\n      { currPage: 2 }\n    );\n  }\n\n  private handleCompareInstructor = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n\n    this.setState(\n      { currPage: 3 },\n    )\n\n    Streamlit.setComponentValue(\n      { currPage: 3 }\n    );\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  // private _onFocus = (): void => {\n  //   this.setState({ isFocused: true })\n  // }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  // private _onBlur = (): void => {\n  //   this.setState({ isFocused: false })\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}